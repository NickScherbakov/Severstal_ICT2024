"""
TITAN Analytics Platform - Template Library Loader
–ó–∞–≥—Ä—É–∂–∞–µ—Ç –ø—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—É—é –±–∏–±–ª–∏–æ—Ç–µ–∫—É —à–∞–±–ª–æ–Ω–æ–≤ –¥–ª—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö use-cases
"""

from django.core.management.base import BaseCommand
from accounts.models import Theme, Template, MetaBlock, TemplateCategory, DataSource


class Command(BaseCommand):
    help = '–ó–∞–≥—Ä—É–∂–∞–µ—Ç –±–∏–±–ª–∏–æ—Ç–µ–∫—É –≥–æ—Ç–æ–≤—ã—Ö —à–∞–±–ª–æ–Ω–æ–≤ TITAN Analytics Platform'

    def handle(self, *args, **options):
        self.stdout.write(self.style.SUCCESS('üöÄ –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ —à–∞–±–ª–æ–Ω–æ–≤ TITAN Analytics...'))
        
        # –°–æ–∑–¥–∞–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –¥–∞–Ω–Ω—ã—Ö
        self._create_data_sources()
        
        # –°–æ–∑–¥–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        categories = self._create_categories()
        
        # –°–æ–∑–¥–∞–µ–º —à–∞–±–ª–æ–Ω—ã –¥–ª—è –∫–∞–∂–¥–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        self._create_business_templates(categories['business'])
        self._create_research_templates(categories['research'])
        self._create_media_templates(categories['media'])
        self._create_legal_templates(categories['legal'])
        self._create_education_templates(categories['education'])
        
        self.stdout.write(self.style.SUCCESS('‚úÖ –ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ —à–∞–±–ª–æ–Ω–æ–≤ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞!'))
        self.stdout.write(self.style.SUCCESS(f'üìä –í—Å–µ–≥–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–π: {TemplateCategory.objects.count()}'))
        self.stdout.write(self.style.SUCCESS(f'üìã –í—Å–µ–≥–æ —à–∞–±–ª–æ–Ω–æ–≤: {Template.objects.count()}'))
        self.stdout.write(self.style.SUCCESS(f'üîß –í—Å–µ–≥–æ –º–µ—Ç–∞-–±–ª–æ–∫–æ–≤: {MetaBlock.objects.count()}'))

    def _create_data_sources(self):
        """–°–æ–∑–¥–∞–µ—Ç —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –¥–∞–Ω–Ω—ã—Ö"""
        self.stdout.write('üì° –°–æ–∑–¥–∞–Ω–∏–µ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –¥–∞–Ω–Ω—ã—Ö...')
        
        sources = [
            {
                'name': '–Ø–Ω–¥–µ–∫—Å –ü–æ–∏—Å–∫',
                'source_type': 'web',
                'base_url': 'https://yandex.ru',
                'api_key_required': True,
                'is_active': True,
            },
            {
                'name': 'YouTube',
                'source_type': 'video',
                'base_url': 'https://youtube.com',
                'api_key_required': False,
                'is_active': True,
            },
            {
                'name': '–¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π –ë–∞–Ω–∫ –†–§',
                'source_type': 'web',
                'base_url': 'https://cbr.ru',
                'api_key_required': False,
                'is_active': True,
            },
            {
                'name': '–†–æ—Å—Å—Ç–∞—Ç',
                'source_type': 'web',
                'base_url': 'https://rosstat.gov.ru',
                'api_key_required': False,
                'is_active': True,
            },
            {
                'name': '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ —Ñ–∞–π–ª—ã',
                'source_type': 'file',
                'api_key_required': False,
                'is_active': True,
            },
        ]
        
        for source_data in sources:
            DataSource.objects.get_or_create(
                name=source_data['name'],
                defaults=source_data
            )
        
        self.stdout.write(self.style.SUCCESS(f'  ‚úì –°–æ–∑–¥–∞–Ω–æ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤: {DataSource.objects.count()}'))

    def _create_categories(self):
        """–°–æ–∑–¥–∞–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —à–∞–±–ª–æ–Ω–æ–≤"""
        self.stdout.write('üìÇ –°–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π...')
        
        categories = {}
        
        cat_data = [
            {
                'name': '–ë–∏–∑–Ω–µ—Å-–∞–Ω–∞–ª–∏—Ç–∏–∫–∞',
                'slug': 'business',
                'icon': 'briefcase',
                'description': '–®–∞–±–ª–æ–Ω—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ä—ã–Ω–∫–æ–≤, –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤, —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–π –æ—Ç—á–µ—Ç–Ω–æ—Å—Ç–∏',
                'position': 1,
            },
            {
                'name': '–ù–∞—É—á–Ω—ã–µ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è',
                'slug': 'research',
                'icon': 'flask',
                'description': '–ê–Ω–∞–ª–∏–∑ –ø—É–±–ª–∏–∫–∞—Ü–∏–π, —Ü–∏—Ç–∏—Ä–æ–≤–∞–Ω–∏–π, –Ω–∞—É—á–Ω—ã—Ö —Ç—Ä–µ–Ω–¥–æ–≤',
                'position': 2,
            },
            {
                'name': '–ú–µ–¥–∏–∞-–º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥',
                'slug': 'media',
                'icon': 'tv',
                'description': '–û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —É–ø–æ–º–∏–Ω–∞–Ω–∏–π, —Ä–µ–ø—É—Ç–∞—Ü–∏–∏, –º–µ–¥–∏–∞-—Ç—Ä–µ–Ω–¥–æ–≤',
                'position': 3,
            },
            {
                'name': '–Æ—Ä–∏–¥–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑',
                'slug': 'legal',
                'icon': 'gavel',
                'description': '–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–∫–æ–Ω–æ–¥–∞—Ç–µ–ª—å—Å—Ç–≤–∞, —Å—É–¥–µ–±–Ω–æ–π –ø—Ä–∞–∫—Ç–∏–∫–∏',
                'position': 4,
            },
            {
                'name': '–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ',
                'slug': 'education',
                'icon': 'graduation-cap',
                'description': '–£—á–µ–±–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã, –∫—É—Ä—Å—ã, –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π',
                'position': 5,
            },
        ]
        
        for cat in cat_data:
            category, created = TemplateCategory.objects.get_or_create(
                slug=cat['slug'],
                defaults=cat
            )
            categories[cat['slug']] = category
            status = '‚úì —Å–æ–∑–¥–∞–Ω–∞' if created else '‚âà —Å—É—â–µ—Å—Ç–≤—É–µ—Ç'
            self.stdout.write(f'  {status}: {cat["name"]}')
        
        return categories

    def _create_business_templates(self, category):
        """–°–æ–∑–¥–∞–µ—Ç —à–∞–±–ª–æ–Ω—ã –¥–ª—è –±–∏–∑–Ω–µ—Å-–∞–Ω–∞–ª–∏—Ç–∏–∫–∏"""
        self.stdout.write('üíº –°–æ–∑–¥–∞–Ω–∏–µ –±–∏–∑–Ω–µ—Å-—à–∞–±–ª–æ–Ω–æ–≤...')
        
        # –®–∞–±–ª–æ–Ω: –ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Ä—ã–Ω–∫–∞
        theme, _ = Theme.objects.get_or_create(name='–†—ã–Ω–æ—á–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞')
        template, created = Template.objects.get_or_create(
            name='–ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Ä—ã–Ω–∫–∞',
            defaults={
                'theme': theme,
                'category': category,
                'description': '–ü–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Ü–µ–ª–µ–≤–æ–≥–æ —Ä—ã–Ω–∫–∞: –æ–±—ä–µ–º, –¥–∏–Ω–∞–º–∏–∫–∞, –∏–≥—Ä–æ–∫–∏, —Ç—Ä–µ–Ω–¥—ã',
                'is_public': True,
                'tags': ['—Ä—ã–Ω–æ–∫', '–∞–Ω–∞–ª–∏—Ç–∏–∫–∞', '–æ–±—ä–µ–º', '—Ç—Ä–µ–Ω–¥—ã'],
            }
        )
        
        if created:
            blocks_data = [
                ('–û–±—ä–µ–º –∏ –¥–∏–Ω–∞–º–∏–∫–∞ —Ä—ã–Ω–∫–∞ {theme}', MetaBlock.PLOTLY, {'chart_type': 'line'}),
                ('–ö–ª—é—á–µ–≤—ã–µ –∏–≥—Ä–æ–∫–∏ —Ä—ã–Ω–∫–∞ {theme}', MetaBlock.TABLE, {}),
                ('–¢—Ä–µ–Ω–¥—ã –∏ –ø—Ä–æ–≥–Ω–æ–∑—ã —Ä–∞–∑–≤–∏—Ç–∏—è {theme}', MetaBlock.FORECAST, {'model': 'yandexgpt'}),
                ('–†–µ–≥—É–ª—è—Ç–æ—Ä–Ω–∞—è —Å—Ä–µ–¥–∞ {theme}', MetaBlock.TEXT, {}),
                ('SWOT-–∞–Ω–∞–ª–∏–∑ —Ä—ã–Ω–∫–∞ {theme}', MetaBlock.COMPARISON, {'items': ['Strengths', 'Weaknesses', 'Opportunities', 'Threats']}),
            ]
            
            for i, (query, block_type, params) in enumerate(blocks_data):
                MetaBlock.objects.create(
                    query_template=query,
                    template=template,
                    type=block_type,
                    position=i,
                    processing_params=params
                )
            
            self.stdout.write(f'  ‚úì {template.name}')
        
        # –®–∞–±–ª–æ–Ω: –ö–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω–∞—è —Ä–∞–∑–≤–µ–¥–∫–∞
        theme, _ = Theme.objects.get_or_create(name='–ö–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω—ã–π –∞–Ω–∞–ª–∏–∑')
        template, created = Template.objects.get_or_create(
            name='–ö–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω–∞—è —Ä–∞–∑–≤–µ–¥–∫–∞',
            defaults={
                'theme': theme,
                'category': category,
                'description': '–î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤ –∏ –∏—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π',
                'is_public': True,
                'tags': ['–∫–æ–Ω–∫—É—Ä–µ–Ω—Ç—ã', '—Å—Ç—Ä–∞—Ç–µ–≥–∏—è', '–ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ'],
            }
        )
        
        if created:
            blocks_data = [
                ('–°–ø–∏—Å–æ–∫ –æ—Å–Ω–æ–≤–Ω—ã—Ö –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤ {theme}', MetaBlock.TABLE, {}),
                ('–°—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ {theme}', MetaBlock.COMPARISON, {}),
                ('–ö–∞—Ä—Ç–∞ –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è {theme}', MetaBlock.PLOTLY, {'chart_type': 'scatter'}),
                ('–§–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤ {theme}', MetaBlock.TABLE, {}),
                ('–ê–Ω–∞–ª–∏–∑ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤ {theme}', MetaBlock.TEXT, {}),
                ('–ü—Ä–æ–≥–Ω–æ–∑ –¥–µ–π—Å—Ç–≤–∏–π –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤ {theme}', MetaBlock.FORECAST, {}),
            ]
            
            for i, (query, block_type, params) in enumerate(blocks_data):
                MetaBlock.objects.create(
                    query_template=query,
                    template=template,
                    type=block_type,
                    position=i,
                    processing_params=params
                )
            
            self.stdout.write(f'  ‚úì {template.name}')

    def _create_research_templates(self, category):
        """–°–æ–∑–¥–∞–µ—Ç —à–∞–±–ª–æ–Ω—ã –¥–ª—è –Ω–∞—É—á–Ω—ã—Ö –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–π"""
        self.stdout.write('üî¨ –°–æ–∑–¥–∞–Ω–∏–µ –Ω–∞—É—á–Ω—ã—Ö —à–∞–±–ª–æ–Ω–æ–≤...')
        
        # –®–∞–±–ª–æ–Ω: –û–±–∑–æ—Ä –ª–∏—Ç–µ—Ä–∞—Ç—É—Ä—ã
        theme, _ = Theme.objects.get_or_create(name='–ù–∞—É—á–Ω—ã–π –æ–±–∑–æ—Ä')
        template, created = Template.objects.get_or_create(
            name='–°–∏—Å—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –æ–±–∑–æ—Ä –ª–∏—Ç–µ—Ä–∞—Ç—É—Ä—ã',
            defaults={
                'theme': theme,
                'category': category,
                'description': '–ê–Ω–∞–ª–∏–∑ –Ω–∞—É—á–Ω—ã—Ö –ø—É–±–ª–∏–∫–∞—Ü–∏–π –ø–æ —Ç–µ–º–µ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è',
                'is_public': True,
                'tags': ['–Ω–∞—É–∫–∞', '–ø—É–±–ª–∏–∫–∞—Ü–∏–∏', '–æ–±–∑–æ—Ä', '—Ü–∏—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ'],
            }
        )
        
        if created:
            blocks_data = [
                ('–ö–ª—é—á–µ–≤—ã–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –ø–æ —Ç–µ–º–µ {theme}', MetaBlock.TABLE, {}),
                ('–í—Ä–µ–º–µ–Ω–Ω–∞—è –¥–∏–Ω–∞–º–∏–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–π {theme}', MetaBlock.TIMELINE, {}),
                ('–ù–∞–∏–±–æ–ª–µ–µ —Ü–∏—Ç–∏—Ä—É–µ–º—ã–µ —Ä–∞–±–æ—Ç—ã {theme}', MetaBlock.TABLE, {}),
                ('–°–µ—Ç—å —Å–æ–∞–≤—Ç–æ—Ä—Å—Ç–≤–∞ {theme}', MetaBlock.NETWORK, {}),
                ('–û—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–π {theme}', MetaBlock.TEXT, {}),
                ('–ü–µ—Ä—Å–ø–µ–∫—Ç–∏–≤–Ω—ã–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è {theme}', MetaBlock.FORECAST, {}),
            ]
            
            for i, (query, block_type, params) in enumerate(blocks_data):
                MetaBlock.objects.create(
                    query_template=query,
                    template=template,
                    type=block_type,
                    position=i,
                    processing_params=params
                )
            
            self.stdout.write(f'  ‚úì {template.name}')

    def _create_media_templates(self, category):
        """–°–æ–∑–¥–∞–µ—Ç —à–∞–±–ª–æ–Ω—ã –¥–ª—è –º–µ–¥–∏–∞-–º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        self.stdout.write('üì∫ –°–æ–∑–¥–∞–Ω–∏–µ –º–µ–¥–∏–∞-—à–∞–±–ª–æ–Ω–æ–≤...')
        
        # –®–∞–±–ª–æ–Ω: –†–µ–ø—É—Ç–∞—Ü–∏–æ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑
        theme, _ = Theme.objects.get_or_create(name='–ú–µ–¥–∏–∞-–∞–Ω–∞–ª–∏—Ç–∏–∫–∞')
        template, created = Template.objects.get_or_create(
            name='–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ä–µ–ø—É—Ç–∞—Ü–∏–∏ –±—Ä–µ–Ω–¥–∞',
            defaults={
                'theme': theme,
                'category': category,
                'description': '–û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —É–ø–æ–º–∏–Ω–∞–Ω–∏–π –∏ –∞–Ω–∞–ª–∏–∑ —Ä–µ–ø—É—Ç–∞—Ü–∏–∏ –≤ –º–µ–¥–∏–∞',
                'is_public': True,
                'tags': ['—Ä–µ–ø—É—Ç–∞—Ü–∏—è', '–±—Ä–µ–Ω–¥', '—É–ø–æ–º–∏–Ω–∞–Ω–∏—è', '—Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å'],
            }
        )
        
        if created:
            blocks_data = [
                ('–í—Å–µ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è –±—Ä–µ–Ω–¥–∞ {theme}', MetaBlock.TEXT, {}),
                ('–ê–Ω–∞–ª–∏–∑ —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ —É–ø–æ–º–∏–Ω–∞–Ω–∏–π {theme}', MetaBlock.SENTIMENT, {}),
                ('–î–∏–Ω–∞–º–∏–∫–∞ —É–ø–æ–º–∏–Ω–∞–Ω–∏–π {theme}', MetaBlock.TIMELINE, {}),
                ('–ö–ª—é—á–µ–≤—ã–µ —Ç–µ–º—ã –æ–±—Å—É–∂–¥–µ–Ω–∏–π {theme}', MetaBlock.TEXT, {}),
                ('–í–∏–¥–µ–æ-—É–ø–æ–º–∏–Ω–∞–Ω–∏—è {theme}', MetaBlock.VIDEO, {}),
                ('–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —É–ª—É—á—à–µ–Ω–∏—é {theme}', MetaBlock.TEXT, {}),
            ]
            
            for i, (query, block_type, params) in enumerate(blocks_data):
                MetaBlock.objects.create(
                    query_template=query,
                    template=template,
                    type=block_type,
                    position=i,
                    processing_params=params
                )
            
            self.stdout.write(f'  ‚úì {template.name}')

    def _create_legal_templates(self, category):
        """–°–æ–∑–¥–∞–µ—Ç —à–∞–±–ª–æ–Ω—ã –¥–ª—è —é—Ä–∏–¥–∏—á–µ—Å–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞"""
        self.stdout.write('‚öñÔ∏è –°–æ–∑–¥–∞–Ω–∏–µ —é—Ä–∏–¥–∏—á–µ—Å–∫–∏—Ö —à–∞–±–ª–æ–Ω–æ–≤...')
        
        # –®–∞–±–ª–æ–Ω: –ó–∞–∫–æ–Ω–æ–¥–∞—Ç–µ–ª—å–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
        theme, _ = Theme.objects.get_or_create(name='–ü—Ä–∞–≤–æ–≤–æ–π –∞–Ω–∞–ª–∏–∑')
        template, created = Template.objects.get_or_create(
            name='–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–∫–æ–Ω–æ–¥–∞—Ç–µ–ª—å—Å—Ç–≤–∞',
            defaults={
                'theme': theme,
                'category': category,
                'description': '–û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ –∑–∞–∫–æ–Ω–æ–¥–∞—Ç–µ–ª—å—Å—Ç–≤–µ',
                'is_public': True,
                'tags': ['–∑–∞–∫–æ–Ω—ã', '—Ä–µ–≥—É–ª–∏—Ä–æ–≤–∞–Ω–∏–µ', '–∫–æ–º–ø–ª–∞–µ–Ω—Å'],
            }
        )
        
        if created:
            blocks_data = [
                ('–ò–∑–º–µ–Ω–µ–Ω–∏—è –≤ –∑–∞–∫–æ–Ω–æ–¥–∞—Ç–µ–ª—å—Å—Ç–≤–µ {theme}', MetaBlock.TIMELINE, {}),
                ('–ù–æ–≤—ã–µ –Ω–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–µ –∞–∫—Ç—ã {theme}', MetaBlock.TABLE, {}),
                ('–ê–Ω–∞–ª–∏–∑ –≤–ª–∏—è–Ω–∏—è –Ω–∞ –±–∏–∑–Ω–µ—Å {theme}', MetaBlock.TEXT, {}),
                ('–°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω–æ–π –ø—Ä–∞–∫—Ç–∏–∫–æ–π {theme}', MetaBlock.COMPARISON, {}),
                ('–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –∞–¥–∞–ø—Ç–∞—Ü–∏–∏ {theme}', MetaBlock.TEXT, {}),
            ]
            
            for i, (query, block_type, params) in enumerate(blocks_data):
                MetaBlock.objects.create(
                    query_template=query,
                    template=template,
                    type=block_type,
                    position=i,
                    processing_params=params
                )
            
            self.stdout.write(f'  ‚úì {template.name}')

    def _create_education_templates(self, category):
        """–°–æ–∑–¥–∞–µ—Ç —à–∞–±–ª–æ–Ω—ã –¥–ª—è –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è"""
        self.stdout.write('üéì –°–æ–∑–¥–∞–Ω–∏–µ –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã—Ö —à–∞–±–ª–æ–Ω–æ–≤...')
        
        # –®–∞–±–ª–æ–Ω: –£—á–µ–±–Ω—ã–π –æ–±–∑–æ—Ä
        theme, _ = Theme.objects.get_or_create(name='–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ')
        template, created = Template.objects.get_or_create(
            name='–ö–æ–º–ø–ª–µ–∫—Å–Ω–æ–µ –∏–∑—É—á–µ–Ω–∏–µ —Ç–µ–º—ã',
            defaults={
                'theme': theme,
                'category': category,
                'description': '–°–∏—Å—Ç–µ–º–∞—Ç–∏–∑–∞—Ü–∏—è –∑–Ω–∞–Ω–∏–π –ø–æ —É—á–µ–±–Ω–æ–π —Ç–µ–º–µ',
                'is_public': True,
                'tags': ['–æ–±—É—á–µ–Ω–∏–µ', '–∑–Ω–∞–Ω–∏—è', '–º–∞—Ç–µ—Ä–∏–∞–ª—ã'],
            }
        )
        
        if created:
            blocks_data = [
                ('–¢–µ–æ—Ä–µ—Ç–∏—á–µ—Å–∫–∏–π –æ–±–∑–æ—Ä {theme}', MetaBlock.TEXT, {}),
                ('–ö–ª—é—á–µ–≤—ã–µ –∫–æ–Ω—Ü–µ–ø—Ü–∏–∏ {theme}', MetaBlock.TABLE, {}),
                ('–ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç {theme}', MetaBlock.TIMELINE, {}),
                ('–°–≤—è–∑–∏ –º–µ–∂–¥—É –∫–æ–Ω—Ü–µ–ø—Ü–∏—è–º–∏ {theme}', MetaBlock.NETWORK, {}),
                ('–í–∏–¥–µ–æ-–ª–µ–∫—Ü–∏–∏ –ø–æ —Ç–µ–º–µ {theme}', MetaBlock.VIDEO, {}),
                ('–ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–∏–º–µ—Ä—ã {theme}', MetaBlock.TEXT, {}),
            ]
            
            for i, (query, block_type, params) in enumerate(blocks_data):
                MetaBlock.objects.create(
                    query_template=query,
                    template=template,
                    type=block_type,
                    position=i,
                    processing_params=params
                )
            
            self.stdout.write(f'  ‚úì {template.name}')
