"""
TITAN Analytics Platform - Data Processors Registry
–°–∏—Å—Ç–µ–º–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–∏–ø–æ–≤ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
"""

from abc import ABC, abstractmethod
from typing import Dict, List, Any, Optional
import json


class DataProcessor(ABC):
    """–ë–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –¥–∞–Ω–Ω—ã—Ö"""
    
    @abstractmethod
    def can_process(self, block_type: str, data_type: str = 'text') -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –º–æ–∂–µ—Ç –ª–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–∞–±–æ—Ç–∞—Ç—å —Å —ç—Ç–∏–º —Ç–∏–ø–æ–º –¥–∞–Ω–Ω—ã—Ö"""
        pass
    
    @abstractmethod
    def process(self, data: Any, params: Dict) -> Dict:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ"""
        pass
    
    def get_name(self) -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞"""
        return self.__class__.__name__


class ProcessorRegistry:
    """–†–µ–µ—Å—Ç—Ä –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –¥–∞–Ω–Ω—ã—Ö"""
    _processors: List[DataProcessor] = []
    _initialized = False
    
    @classmethod
    def register(cls, processor: DataProcessor):
        """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –Ω–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫"""
        if processor not in cls._processors:
            cls._processors.append(processor)
            print(f"‚úÖ Registered processor: {processor.get_name()}")
    
    @classmethod
    def get_processor(cls, block_type: str, data_type: str = 'text') -> Optional[DataProcessor]:
        """–ù–∞—Ö–æ–¥–∏—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫"""
        for processor in cls._processors:
            if processor.can_process(block_type, data_type):
                return processor
        return None
    
    @classmethod
    def list_processors(cls) -> List[str]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤"""
        return [p.get_name() for p in cls._processors]
    
    @classmethod
    def initialize(cls):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≤—Å–µ –±–∞–∑–æ–≤—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏"""
        if cls._initialized:
            return
        
        cls.register(SentimentAnalysisProcessor())
        cls.register(NetworkGraphProcessor())
        cls.register(TimelineProcessor())
        cls.register(ComparisonProcessor())
        cls.register(ForecastProcessor())
        cls.register(TableProcessor())
        
        cls._initialized = True
        print(f"üöÄ TITAN Analytics: Initialized {len(cls._processors)} processors")


class SentimentAnalysisProcessor(DataProcessor):
    """–ê–Ω–∞–ª–∏–∑ —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ —Ç–µ–∫—Å—Ç–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º YandexGPT"""
    
    def can_process(self, block_type: str, data_type: str = 'text') -> bool:
        return block_type == 'sentiment'
    
    def process(self, data: Any, params: Dict) -> Dict:
        """
        –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å —Ç–µ–∫—Å—Ç–∞
        
        Args:
            data: —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
            params: –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏ (model, detailed –∏ —Ç.–¥.)
        
        Returns:
            Dict —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –∞–Ω–∞–ª–∏–∑–∞ —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏
        """
        from search.yagpt import ask_yagpt
        from analyst.settings import YANDEX_SEARCH_API_TOKEN
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –¥–∞–Ω–Ω—ã—Ö
        if not data or (isinstance(data, dict) and not data.get('data')):
            return {
                'type': 'sentiment',
                'error': '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞'
            }
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç
        text = data.get('data') if isinstance(data, dict) else str(data)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–æ–º–ø—Ç
        prompt = f"""–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ç–µ–∫—Å—Ç–∞.

–û–ø—Ä–µ–¥–µ–ª–∏:
1. –û–±—â–∞—è —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å: –ø–æ–∑–∏—Ç–∏–≤–Ω–∞—è, –Ω–µ–≥–∞—Ç–∏–≤–Ω–∞—è –∏–ª–∏ –Ω–µ–π—Ç—Ä–∞–ª—å–Ω–∞—è
2. –£—Ä–æ–≤–µ–Ω—å —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ (–æ—Ç 1 –¥–æ 10)
3. –ö–ª—é—á–µ–≤—ã–µ —ç–º–æ—Ü–∏–∏
4. –û—Å–Ω–æ–≤–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã —Ç–∞–∫–æ–π —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏

–ü—Ä–µ–¥—Å—Ç–∞–≤—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ JSON —Ñ–æ—Ä–º–∞—Ç–µ:
{{
  "sentiment": "positive|negative|neutral",
  "score": 0-10,
  "emotions": ["—ç–º–æ—Ü–∏—è1", "—ç–º–æ—Ü–∏—è2"],
  "reasons": ["–ø—Ä–∏—á–∏–Ω–∞1", "–ø—Ä–∏—á–∏–Ω–∞2"],
  "summary": "–∫—Ä–∞—Ç–∫–æ–µ —Ä–µ–∑—é–º–µ"
}}

–¢–µ–∫—Å—Ç: {text[:2000]}"""
        
        try:
            result = ask_yagpt(
                prompt,
                YANDEX_SEARCH_API_TOKEN,
                params.get('model', 'yandexgpt')
            )
            
            # –ü—ã—Ç–∞–µ–º—Å—è —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å JSON
            try:
                analysis = json.loads(result)
            except json.JSONDecodeError:
                # –ï—Å–ª–∏ –Ω–µ JSON, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∫ –µ—Å—Ç—å
                analysis = {'summary': result}
            
            return {
                'type': 'sentiment',
                'analysis': analysis,
                'raw_text': result,
                'visualization': {
                    'type': 'sentiment_gauge',
                    'value': analysis.get('score', 5) if isinstance(analysis, dict) else 5,
                    'sentiment': analysis.get('sentiment', 'neutral') if isinstance(analysis, dict) else 'neutral'
                }
            }
        except Exception as e:
            return {
                'type': 'sentiment',
                'error': f'–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {str(e)}'
            }


class NetworkGraphProcessor(DataProcessor):
    """–ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∞ —Å–≤—è–∑–µ–π –º–µ–∂–¥—É —Å—É—â–Ω–æ—Å—Ç—è–º–∏"""
    
    def can_process(self, block_type: str, data_type: str = 'text') -> bool:
        return block_type == 'network'
    
    def process(self, data: Any, params: Dict) -> Dict:
        """
        –°—Ç—Ä–æ–∏—Ç –≥—Ä–∞—Ñ —Å–≤—è–∑–µ–π –º–µ–∂–¥—É —É–ø–æ–º–∏–Ω–∞–µ–º—ã–º–∏ —Å—É—â–Ω–æ—Å—Ç—è–º–∏
        """
        from search.yagpt import ask_yagpt
        from analyst.settings import YANDEX_SEARCH_API_TOKEN
        
        if not data or (isinstance(data, dict) and not data.get('data')):
            return {
                'type': 'network',
                'error': '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞'
            }
        
        text = data.get('data') if isinstance(data, dict) else str(data)
        
        prompt = f"""–ò–∑–≤–ª–µ–∫–∏ –∏–∑ —Ç–µ–∫—Å—Ç–∞ –≤—Å–µ –≤–∞–∂–Ω—ã–µ —Å—É—â–Ω–æ—Å—Ç–∏ (–æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏, –ª—é–¥–∏, —Å–æ–±—ã—Ç–∏—è) –∏ —Å–≤—è–∑–∏ –º–µ–∂–¥—É –Ω–∏–º–∏.

–í–µ—Ä–Ω–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ JSON —Ñ–æ—Ä–º–∞—Ç–µ:
{{
  "nodes": [
    {{"id": "node1", "label": "–ù–∞–∑–≤–∞–Ω–∏–µ", "type": "organization|person|event"}},
    {{"id": "node2", "label": "–ù–∞–∑–≤–∞–Ω–∏–µ", "type": "organization|person|event"}}
  ],
  "edges": [
    {{"from": "node1", "to": "node2", "label": "—Ç–∏–ø —Å–≤—è–∑–∏", "weight": 1-10}}
  ]
}}

–¢–µ–∫—Å—Ç: {text[:2000]}"""
        
        try:
            result = ask_yagpt(
                prompt,
                YANDEX_SEARCH_API_TOKEN,
                params.get('model', 'yandexgpt')
            )
            
            try:
                graph_data = json.loads(result)
            except json.JSONDecodeError:
                # Fallback: —Å–æ–∑–¥–∞—ë–º –ø—Ä–æ—Å—Ç–æ–π –≥—Ä–∞—Ñ
                graph_data = {
                    'nodes': [{'id': '1', 'label': '–î–∞–Ω–Ω—ã–µ', 'type': 'data'}],
                    'edges': []
                }
            
            return {
                'type': 'network',
                'graph_data': graph_data,
                'visualization': 'cytoscape',
                'raw_text': result
            }
        except Exception as e:
            return {
                'type': 'network',
                'error': f'–û—à–∏–±–∫–∞ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –≥—Ä–∞—Ñ–∞: {str(e)}'
            }


class TimelineProcessor(DataProcessor):
    """–ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–π —à–∫–∞–ª—ã —Å–æ–±—ã—Ç–∏–π"""
    
    def can_process(self, block_type: str, data_type: str = 'text') -> bool:
        return block_type == 'timeline'
    
    def process(self, data: Any, params: Dict) -> Dict:
        """
        –ò–∑–≤–ª–µ–∫–∞–µ—Ç —Å–æ–±—ã—Ç–∏—è —Å –¥–∞—Ç–∞–º–∏ –∏ —Å—Ç—Ä–æ–∏—Ç –≤—Ä–µ–º–µ–Ω–Ω—É—é —à–∫–∞–ª—É
        """
        from search.yagpt import ask_yagpt
        from analyst.settings import YANDEX_SEARCH_API_TOKEN
        
        if not data or (isinstance(data, dict) and not data.get('data')):
            return {
                'type': 'timeline',
                'error': '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞'
            }
        
        text = data.get('data') if isinstance(data, dict) else str(data)
        
        prompt = f"""–ò–∑–≤–ª–µ–∫–∏ –∏–∑ —Ç–µ–∫—Å—Ç–∞ –≤—Å–µ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏–π —Å –¥–∞—Ç–∞–º–∏.

–í–µ—Ä–Ω–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ JSON —Ñ–æ—Ä–º–∞—Ç–µ:
{{
  "events": [
    {{
      "date": "YYYY-MM-DD",
      "title": "–ö—Ä–∞—Ç–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è",
      "description": "–û–ø–∏—Å–∞–Ω–∏–µ",
      "importance": 1-10
    }}
  ]
}}

–ï—Å–ª–∏ —Ç–æ—á–Ω–∞—è –¥–∞—Ç–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞, –∏—Å–ø–æ–ª—å–∑—É–π –ø—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω—É—é –∏–ª–∏ "unknown".

–¢–µ–∫—Å—Ç: {text[:2000]}"""
        
        try:
            result = ask_yagpt(
                prompt,
                YANDEX_SEARCH_API_TOKEN,
                params.get('model', 'yandexgpt')
            )
            
            try:
                timeline_data = json.loads(result)
            except json.JSONDecodeError:
                timeline_data = {'events': []}
            
            return {
                'type': 'timeline',
                'timeline_data': timeline_data,
                'visualization': 'timeline',
                'raw_text': result
            }
        except Exception as e:
            return {
                'type': 'timeline',
                'error': f'–û—à–∏–±–∫–∞ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è —Ç–∞–π–º–ª–∞–π–Ω–∞: {str(e)}'
            }


class ComparisonProcessor(DataProcessor):
    """–°—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö"""
    
    def can_process(self, block_type: str, data_type: str = 'text') -> bool:
        return block_type == 'comparison'
    
    def process(self, data: Any, params: Dict) -> Dict:
        """
        –í—ã–ø–æ–ª–Ω—è–µ—Ç —Å—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑
        """
        from search.yagpt import ask_yagpt
        from analyst.settings import YANDEX_SEARCH_API_TOKEN
        
        if not data or (isinstance(data, dict) and not data.get('data')):
            return {
                'type': 'comparison',
                'error': '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞'
            }
        
        text = data.get('data') if isinstance(data, dict) else str(data)
        comparison_items = params.get('items', [])
        
        if comparison_items:
            prompt = f"""–°—Ä–∞–≤–Ω–∏ —Å–ª–µ–¥—É—é—â–∏–µ –∞—Å–ø–µ–∫—Ç—ã: {', '.join(comparison_items)}

–ù–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ–∫—Å—Ç–∞:
{text[:2000]}

–í–µ—Ä–Ω–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ JSON —Ñ–æ—Ä–º–∞—Ç–µ:
{{
  "comparison": [
    {{
      "item": "–Ω–∞–∑–≤–∞–Ω–∏–µ –∞—Å–ø–µ–∫—Ç–∞",
      "value": "–∑–Ω–∞—á–µ–Ω–∏–µ/–æ–ø–∏—Å–∞–Ω–∏–µ",
      "score": 1-10
    }}
  ],
  "summary": "–æ–±—â–∏–π –≤—ã–≤–æ–¥ –∏–∑ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è"
}}"""
        else:
            prompt = f"""–ü—Ä–æ–≤–µ–¥–∏ —Å—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –≤ —Ç–µ–∫—Å—Ç–µ.
–í—ã–¥–µ–ª–∏ –∫–ª—é—á–µ–≤—ã–µ –∞—Å–ø–µ–∫—Ç—ã –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è.

–¢–µ–∫—Å—Ç: {text[:2000]}

–í–µ—Ä–Ω–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ JSON —Ñ–æ—Ä–º–∞—Ç–µ —Å comparison –º–∞—Å—Å–∏–≤–æ–º."""
        
        try:
            result = ask_yagpt(
                prompt,
                YANDEX_SEARCH_API_TOKEN,
                params.get('model', 'yandexgpt')
            )
            
            try:
                comparison_data = json.loads(result)
            except json.JSONDecodeError:
                comparison_data = {'summary': result}
            
            return {
                'type': 'comparison',
                'comparison_data': comparison_data,
                'visualization': 'radar_chart',
                'raw_text': result
            }
        except Exception as e:
            return {
                'type': 'comparison',
                'error': f'–û—à–∏–±–∫–∞ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è: {str(e)}'
            }


class ForecastProcessor(DataProcessor):
    """–ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö"""
    
    def can_process(self, block_type: str, data_type: str = 'text') -> bool:
        return block_type == 'forecast'
    
    def process(self, data: Any, params: Dict) -> Dict:
        """
        –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö
        """
        from search.yagpt import ask_yagpt
        from analyst.settings import YANDEX_SEARCH_API_TOKEN
        
        if not data or (isinstance(data, dict) and not data.get('data')):
            return {
                'type': 'forecast',
                'error': '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞'
            }
        
        text = data.get('data') if isinstance(data, dict) else str(data)
        
        prompt = f"""–ù–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ —Å–¥–µ–ª–∞–π –ø—Ä–æ–≥–Ω–æ–∑ —Ä–∞–∑–≤–∏—Ç–∏—è —Å–∏—Ç—É–∞—Ü–∏–∏.

–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:
{text[:2000]}

–í–µ—Ä–Ω–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ JSON —Ñ–æ—Ä–º–∞—Ç–µ:
{{
  "forecast": {{
    "short_term": "–ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –±–ª–∏–∂–∞–π—à—É—é –ø–µ—Ä—Å–ø–µ–∫—Ç–∏–≤—É",
    "medium_term": "–ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ —Å—Ä–µ–¥–Ω—é—é –ø–µ—Ä—Å–ø–µ–∫—Ç–∏–≤—É",
    "long_term": "–ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –¥–æ–ª–≥—É—é –ø–µ—Ä—Å–ø–µ–∫—Ç–∏–≤—É"
  }},
  "scenarios": [
    {{
      "name": "–Ω–∞–∑–≤–∞–Ω–∏–µ —Å—Ü–µ–Ω–∞—Ä–∏—è",
      "probability": 0-100,
      "description": "–æ–ø–∏—Å–∞–Ω–∏–µ"
    }}
  ],
  "risks": ["—Ä–∏—Å–∫1", "—Ä–∏—Å–∫2"],
  "opportunities": ["–≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å1", "–≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å2"]
}}"""
        
        try:
            result = ask_yagpt(
                prompt,
                YANDEX_SEARCH_API_TOKEN,
                params.get('model', 'yandexgpt')
            )
            
            try:
                forecast_data = json.loads(result)
            except json.JSONDecodeError:
                forecast_data = {'forecast': {'summary': result}}
            
            return {
                'type': 'forecast',
                'forecast_data': forecast_data,
                'visualization': 'forecast_chart',
                'raw_text': result
            }
        except Exception as e:
            return {
                'type': 'forecast',
                'error': f'–û—à–∏–±–∫–∞ –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è: {str(e)}'
            }


class TableProcessor(DataProcessor):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–∞–±–ª–∏—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
    
    def can_process(self, block_type: str, data_type: str = 'text') -> bool:
        return block_type == 'table'
    
    def process(self, data: Any, params: Dict) -> Dict:
        """
        –ò–∑–≤–ª–µ–∫–∞–µ—Ç –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ç–∞–±–ª–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        """
        if not data:
            return {
                'type': 'table',
                'error': '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è'
            }
        
        # –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ —É–∂–µ –≤ —Ç–∞–±–ª–∏—á–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
        if isinstance(data, dict) and 'data' in data:
            table_data = data['data']
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ —É–∂–µ —Ç–∞–±–ª–∏—Ü–µ–π
            if isinstance(table_data, list) and len(table_data) > 0:
                return {
                    'type': 'table',
                    'table_data': {
                        'headers': list(table_data[0].keys()) if isinstance(table_data[0], dict) else [],
                        'rows': table_data
                    },
                    'visualization': 'table'
                }
        
        # –ò–Ω–∞—á–µ –ø—Ä–æ—Å—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫–∞–∫ –µ—Å—Ç—å
        return {
            'type': 'table',
            'table_data': data,
            'visualization': 'table'
        }


# –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ –º–æ–¥—É–ª—è
ProcessorRegistry.initialize()
